@model dynamic
@{
	ViewData["Title"] = "Home Page";
}

@if (User.Identity.IsAuthenticated)
{
	@if (User.IsInRole("Admin"))
	{
		<partial name="_AdminHome" model="Model" />
	}
	else if (User.IsInRole("Director"))
	{
		<partial name="_DirectorHome" model="Model" />
	}
	else if (User.IsInRole("Planner"))
	{
		<partial name="_PlannerHome" model="Model" />
	}
	else if (User.IsInRole("Volunteer"))
	{
		<partial name="_VolunteerHome" model="Model" />
	}
}

@section Scripts {
	@if (User.IsInRole("Volunteer"))
	{
		<script type="text/javascript">
			var progress = @Model.Progress;
			let number = document.getElementById('number');
			let circle = document.querySelector('circle');
			let counter = 0;
			let maxDashOffset = 450;
			let duration = 5000; // Duration of the animation in milliseconds
			let startTime = null;

			function easeOutQuad(t) {
				return t * (2 - t);
			}

			function animate(timestamp) {
				if (!startTime) startTime = timestamp;
				let elapsed = timestamp - startTime;
				let progressRatio = Math.min(elapsed / duration, 1);
				let easedProgress = easeOutQuad(progressRatio);
				let currentProgress = progress * easedProgress;
				let dashOffset = maxDashOffset - (maxDashOffset * (currentProgress / 100));
				circle.style.strokeDashoffset = dashOffset;
				number.innerHTML = `${Math.round(currentProgress)}%`;

				if (elapsed < duration) {
					requestAnimationFrame(animate);
				}
			}

			requestAnimationFrame(animate);

			@* setInterval(() => {
		if (counter >= progress) {
		clearInterval;
		} else {
		counter += 1;
		let dashOffset = maxDashOffset - (maxDashOffset * (counter / 100));
		circle.style.strokeDashoffset = dashOffset;
		number.innerHTML = `${counter}%`;
		}
		}, 30); *@
		</script>
	}
	@if (User.IsInRole("Director"))
	{
		<script src="~/js/rehearsalCalendar.js"></script>

		<script type="text/javascript">
			document.addEventListener('DOMContentLoaded', function () {
				var duration = 2000;

				var chapter = document.getElementById('chapter');
				var chapterCount = @Model.ChapterCount;
				chapter.animate([
					{ '--num': 0 },
					{ '--num': chapterCount }
				], {
					duration: duration,
					fill: 'forwards',
					iterations: 1
				});

				var director = document.getElementById('director');
				var directorCount = @Model.DirectorCount;
				director.animate([
					{ '--num': 0 },
					{ '--num': directorCount }
				], {
					duration: duration,
					fill: 'forwards',
					iterations: 1
				});

				var singer = document.getElementById('singer');
				var singerCount = @Model.SingerCount;
				singer.animate([
					{ '--num': 0 },
					{ '--num': singerCount }
				], {
					duration: duration,
					fill: 'forwards',
					iterations: 1
				});

				var rehearsal = document.getElementById('rehearsal');
				var rehearsalCount = @Model.RehearsalCount;
				rehearsal.animate([
					{ '--num': 0 },
					{ '--num': rehearsalCount }
				], {
					duration: duration,
					fill: 'forwards',
					iterations: 1
				});

			});
		</script>
	}
	@if (User.IsInRole("Planner"))
	{
		<script src="~/js/eventCalendar.js"></script>

		<script type="text/javascript">
			document.addEventListener('DOMContentLoaded', function () {
				var duration = 2000;

				var event = document.getElementById('event');
				var eventCount = @Model.EventCount;
				event.animate([
					{ '--num': 0 },
					{ '--num': eventCount }
				], {
					duration: duration,
					fill: 'forwards',
					iterations: 1
				});

				var city = document.getElementById('city');
				var cityCount = @Model.CityCount;
				city.animate([
					{ '--num': 0 },
					{ '--num': cityCount }
				], {
					duration: duration,
					fill: 'forwards',
					iterations: 1
				});

				var volunteer = document.getElementById('volunteer');
				var volunteerCount = @Model.VolunteerCount;
				volunteer.animate([
					{ '--num': 0 },
					{ '--num': volunteerCount }
				], {
					duration: duration,
					fill: 'forwards',
					iterations: 1
				});

			});
		</script>
	}

}