@model IEnumerable<TomorrowsVoice_Toplevel.Models.Volunteering.Shift>
@{
	TomorrowsVoice_Toplevel.Models.Volunteering.Volunteer volunteer = (TomorrowsVoice_Toplevel.Models.Volunteering.Volunteer)ViewBag.Volunteer;
	ViewData["Title"] = ViewData["ControllerFriendlyName"];
}

<h4>My Shifts</h4>
<small>View and manage upcoming shifts.</small>
<hr />
<form asp-action="Index" method="get">
	<input type="hidden" name="VolunteerID" value="@volunteer.ID" />
	<div class="form-horizontal">
		<div>
			@if (Model.Count() == 0)
			{
				<tr>
					<td>
						No Upcoming Shifts
					</td>
				</tr>
			}
			else
			{
				@foreach (var year in Model.GroupBy(s => s.StartAt.Year))
				{
					<h3>@year.Key</h3>
					foreach (var item in year)
					{
						<div class="row bd-callout d-flex align-items-center" style="border-left-color: @item.BackgroundColor;">
							<div class="col-2">
								<span class="fw-bold m-0">
									@item.Event?.Name
								</span>

								@if (String.IsNullOrWhiteSpace(item.Title))
								{
									<br />
									@Html.DisplayFor(ModelItem => item.Title)
								}
							</div>
							@{
								string start = item.StartAt.ToString(item.StartAt.Minute == 0 ? "%h" : "h:mm");
								string end = item.EndAt.ToString(item.EndAt.Minute == 0 ? "%h" : "h:mm");
								string startTT = item.StartAt.ToString("tt").ToLower();
								string endTT = item.EndAt.ToString("tt").ToLower();
							}
							<div class="col-2">
								<span class="fw-light">
									On
								</span>
								<br />
								@item.DateFormat
							</div>

							<div class="col-1">
								<span class="fw-light">
									Starts at
								</span>
								<br />
								@start @startTT
							</div>
							<div class="col-1">
								<span class="fw-light">
									Ends at
								</span>
								<br />
								@end @endTT
							</div>
							<div class="col-3">
								<span class="fw-light">
									Location
								</span>
								<br />
								@if (!String.IsNullOrWhiteSpace(item.Location))
								{
									@Html.Raw(item.Location + " ⋅ ")
								}
								@item.Event?.Location
							</div>

							<div class="col-3 text-center">
								<div class="row">
									<div class="col-auto">
									@if (item.ShiftDate < DateTime.Today.AddDays(2))
									{
										<a class="btn btn-primary add btn-secondary disabled"
										   asp-controller="Volunteer"
										   asp-action="EmailNotice"
										   asp-route-volunteerId="@volunteer?.ID"
										   asp-route-shiftId="@item.ID"
										   style="pointer-events: none; opacity: 0.5;">
											Cancel Shift
										</a>
									}
									else
									{
										<a class="btn btn-primary add"
										   id="btnCancel"
										   asp-controller="Volunteer"
										   asp-action="SignOffShift"
										   asp-route-volunteerId="@volunteer?.ID"
										   asp-route-shiftId="@item.ID">
											Cancel Shift
										</a>
									}
									</div>
									<div class="col-auto">
									@if (item.UserShifts.Where(a => a.UserID == volunteer.ID && a.WorkingHourRecorded == true).Any() || item.ShiftDate > DateTime.Today)
									{
										<button type="button" class="btn btn-primary btn-secondary trackPerformanceBtn"
												data-shiftid="@item.ID" data-bs-toggle="modal" data-bs-target="#performanceModal"
												disabled>
											Record Hours
										</button>
									}
									else
									{
										<button type="button" class="btn btn-primary h-100 trackPerformanceBtn"
												data-shiftid="@item.ID" data-volunteerid="@volunteer.ID" data-bs-toggle="modal" data-bs-target="#performanceModal">
											Record Hours
										</button>
									}
									</div>
								</div>
								
							</div>
						</div>

					}
				}
			}
		</div>
	</div>
	<p style="color: red; background-color: #f8d7da; padding: 5px 10px; border-radius: 5px; border: 1px solid #f5c6cb; font-weight: bold; display: inline-block;" aria-live="assertive">
		Note: Your shift can not be cancelled within 2 days of the shift date.
	</p>
	<div class="modal fade" id="performanceModal" tabindex="-1" aria-labelledby="performanceModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="performanceModalLabel">Track Performance</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div id="performanceModalContent">
						<p class="text-center text-muted">Loading...</p>
					</div>
				</div>
			</div>
		</div>
	</div>
	@* <partial name="_PagingNavBar" /> *@
</form>
@section Scripts {
	<script type="text/javascript">
		var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
		var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
			return new bootstrap.Tooltip(tooltipTriggerEl)
		})
	</script>

	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script>
		$(document).ready(function () {

			$(document).on("click", ".trackPerformanceBtn", function () {
				let shiftId = $(this).data("shiftid");
				let volunteerId = $(this).data("volunteerid");
				console.log("Shift ID:", shiftId);
				console.log("Volunteer ID:", volunteerId);
				$("#performanceModalContent").html('<p class="text-center text-muted">Loading...</p>');

				$.get(`/VolunteerShift/TrackPerformance/${shiftId}`, { volunteerId: volunteerId }, function (data) {
					$("#performanceModalContent").html(data);

					if ($("#performanceModalContent #ShiftID").length === 0) {
						$("#performanceModalContent").append(`<input type="hidden" id="ShiftID" value="${shiftId}" />`);
					} else {
						$("#performanceModalContent #ShiftID").val(shiftId);
					}

				}).fail(function () {
					console.error("❌ Error loading performance data.");
					$("#performanceModalContent").html('<p class="text-danger">Error loading performance data. Please try again.</p>');
				});
			});

			$(document).on("click", "#savePerformance", function () {
				console.log("🔹 Save button clicked!");

				let shiftId = $("#ShiftID").val();
				if (!shiftId) {
					console.error("❌ ShiftID is missing!");
					alert("Error: ShiftID is missing.");
					return;
				}

				let enrollments = [];
				$("#performanceTable tbody tr").each(function () {
					let row = $(this);
					let enrollment = {
						UserID: row.find("input[name='UserID']").val(),
						ShiftID: shiftId,
						ShowOrNot: row.find("input[name='ShowOrNot']").prop("checked"),
						StartAt: row.find("input[name='StartAt']").val(),
						EndAt: row.find("input[name='EndAt']").val()
					};

					enrollments.push(enrollment);
				});
				console.log(JSON.stringify(enrollments));
				$.ajax({
					url: "/VolunteerShift/UpdatePerformance",
					type: "POST",
					contentType: "application/json",
					data: JSON.stringify(enrollments),
					success: function (response) {
						if (response.success) {
							alert("Performance updated successfully.");
							location.reload();
						} else {
							alert("Error: " + response.message);
						}
					},
					error: function (xhr) {
						console.error("❌ AJAX Error:", xhr.responseText);
						alert("An error occurred while updating performance.");
					}
				});
			});

		});
	</script>
}